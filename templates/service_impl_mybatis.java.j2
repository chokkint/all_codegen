package {{ page_package }}.service.impl;

import com.hg.common.page.PageRequestDTO;
import com.hg.common.page.PageResult;
import com.hg.common.page.PageUtils;
import com.hg.common.utils.BeanConvertUtils;
import {{ page_package }}.dto.{{ dto_class_name }};
import {{ system_package }}.entity.{{ entity_class_name }};
import {{ system_package }}.mapper.{{ mapper_class_name }};
import {{ page_package }}.service.{{ service_class_name }};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

/**
 * {{ page_class_name }} - MyBatis 实现
 * 自动生成的 ServiceImpl，实现常见的增删改查分页方法。
 * 如需扩展业务逻辑，可在本类中补充自定义方法。
 */
@Service
public class {{ page_class_name }}MybatisServiceImpl implements {{ service_class_name }} {

    // 注入对应的 MyBatis Mapper
    @Autowired
    private {{ mapper_class_name }} {{ mapper_instance_name }};

    /**
     * 分页查询
     * @param pageRequest 分页参数
     * @param queryParam  查询条件DTO
     * @return 分页结果
     */
    @Override
    public PageResult<{{ dto_class_name }}> page(PageRequestDTO pageRequest, {{ dto_class_name }} queryParam) {
        // DTO 转 Entity（用于查询条件）
        {{ entity_class_name }} entity = BeanConvertUtils.convert(queryParam, {{ entity_class_name }}.class);
        // MyBatis 物理分页参数
        int offset = (pageRequest.getPage() - 1) * pageRequest.getSize();
        int limit = pageRequest.getSize();
        // 查询数据
        List<{{ entity_class_name }}> entityList = {{ mapper_instance_name }}.queryPage(entity, offset, limit);
        // 查询总数
        long total = {{ mapper_instance_name }}.count(entity);
        // Entity 转 DTO
        List<{{ dto_class_name }}> dtoList = BeanConvertUtils.convertList(entityList, {{ dto_class_name }}.class);
        // 组装分页结果
        return PageUtils.toPageResult(dtoList, total, pageRequest);
    }

    /**
     * 新增记录
     * @param dto 数据对象
     * @return 新增后的数据对象
     */
    @Override
    public {{ dto_class_name }} add({{ dto_class_name }} dto) {
        {{ entity_class_name }} entity = BeanConvertUtils.convert(dto, {{ entity_class_name }}.class);
        {{ mapper_instance_name }}.insert(entity);
        return BeanConvertUtils.convert(entity, {{ dto_class_name }}.class);
    }

    /**
     * 修改记录
     * @param dto 数据对象
     * @return 修改后的数据对象
     */
    @Override
    public {{ dto_class_name }} update({{ dto_class_name }} dto) {
        {{ entity_class_name }} entity = BeanConvertUtils.convert(dto, {{ entity_class_name }}.class);
        {{ mapper_instance_name }}.update(entity);
        return BeanConvertUtils.convert(entity, {{ dto_class_name }}.class);
    }

    /**
     * 删除记录
     * @param id 主键
     */
    @Override
    public void delete({{ pk_field_java_type }} id) {
        {{ mapper_instance_name }}.deleteById(id);
    }

    /**
     * 根据主键查询详情
     * @param id 主键
     * @return 数据对象
     */
    @Override
    public {{ dto_class_name }} getById({{ pk_field_java_type }} id) {
        {{ entity_class_name }} entity = {{ mapper_instance_name }}.selectById(id);
        return BeanConvertUtils.convert(entity, {{ dto_class_name }}.class);
    }
}
