package {{ page_package }}.controller;

import com.hg.common.base.BaseController;
import com.hg.common.base.BaseService;
import com.hg.common.response.ApiResponse;
import com.hg.common.page.PageRequestDTO;
import com.hg.common.page.PageResult;
import {{ page_package }}.dto.{{ dto_class_name }};
import {{ page_package }}.service.{{ service_class_name }};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("{{ api_prefix }}/{{ page_name | lower }}")
public class {{ controller_class_name }} extends BaseController<{{ dto_class_name }}, {{ dto_class_name }}> {

    @Autowired
    private {{ service_class_name }} {{ service_instance_name }};

    @Override
    protected BaseService<{{ dto_class_name }}, {{ dto_class_name }}> getService() {
        return {{ service_instance_name }};
    }

    /**
     * 分页查询
     */
    @GetMapping("/page")
    public ApiResponse<PageResult<{{ dto_class_name }}>> page(PageRequestDTO pageRequest, {{ dto_class_name }} queryParam) {
        return success({{ service_instance_name }}.page(pageRequest, queryParam));
    }

    /**
     * 新增
     */
    @PostMapping
    public ApiResponse<{{ dto_class_name }}> add(@RequestBody {{ dto_class_name }} dto) {
        {{ dto_class_name }} result = {{ service_instance_name }}.add(dto);
        return success(result);
    }

    /**
     * 修改
     */
    @PutMapping
    public ApiResponse<{{ dto_class_name }}> update(@RequestBody {{ dto_class_name }} dto) {
        {{ dto_class_name }} result = {{ service_instance_name }}.update(dto);
        return success(result);
    }

    /**
     * 删除
     */
    @DeleteMapping("/{id}")
    public ApiResponse<?> delete(@PathVariable("id") {{ pk_field_java_type }} id) {
        {{ service_instance_name }}.delete(id);
        return success();
    }

    /**
     * 单条详情
     */
    @GetMapping("/{id}")
    public ApiResponse<{{ dto_class_name }}> get(@PathVariable("id") {{ pk_field_java_type }} id) {
        {{ dto_class_name }} data = {{ service_instance_name }}.getById(id);
        if (data == null) {
            return fail("404", "数据不存在");
        }
        return success(data);
    }
}
