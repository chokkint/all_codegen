package {{ page_package }}.service.impl;

import com.hg.common.page.PageRequestDTO;
import com.hg.common.page.PageResult;
import {{ page_package }}.service.{{ service_class_name }};
import {{ page_package }}.dto.{{ dto_class_name }};
import {{ system_package }}.entity.{{ entity_class_name }};
import {{ system_package }}.repository.{{ repository_class_name }};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

@Service
public class {{ page_class_name }}JpaServiceImpl implements {{ service_class_name }} {

    @Autowired
    private {{ repository_class_name }} {{ repository_class_name|lower|replace('repository', 'Repository') }};

    @Override
    public PageResult<{{ dto_class_name }}> page(PageRequestDTO pageRequest, {{ dto_class_name }} queryParam) {
        Pageable pageable = pageRequest.toPageable();
        // TODO: 根据 queryParam 构建动态查询
        Page<{{ entity_class_name }}> page = {{ repository_class_name|lower|replace('repository', 'Repository') }}.findAll(pageable);
        // TODO: entity->dto 转换
        return new PageResult<>(page.map(this::convertToDto));
    }

    @Override
    public {{ dto_class_name }} add({{ dto_class_name }} dto) {
        // TODO: 实现新增逻辑
        return null;
    }

    @Override
    public {{ dto_class_name }} update({{ dto_class_name }} dto) {
        // TODO: 实现更新逻辑
        return null;
    }

    @Override
    public void delete({{ pk_field_java_type }} {{ pk_field_java_name }}) {
        // TODO: 实现删除逻辑
    }

    @Override
    public {{ dto_class_name }} getById({{ pk_field_java_type }} id) {
        // TODO: 实现按ID查询
        return null;
    }

    // entity -> dto 转换（示例）
    private {{ dto_class_name }} convertToDto({{ entity_class_name }} entity) {
        // TODO: 实现实体到DTO的转换
        return null;
    }
}
